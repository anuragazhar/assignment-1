{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "aafe22d5-8b32-4fd3-a072-bdd8ac9a6377",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pymysql\n",
    "from faker import Faker\n",
    "import random\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "330af99a-c7b4-45a4-a102-32e2083ab66f",
   "metadata": {},
   "outputs": [],
   "source": [
    "connection = pymysql.connect(\n",
    "    host='localhost',\n",
    "    user='root',\n",
    "    password='Anuragroy@123',  # Change to your MySQL password\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c899d46b-3937-494a-9226-65cb2a8d740e",
   "metadata": {},
   "outputs": [],
   "source": [
    "cursor = connection.cursor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9071929f-04ad-4209-8d14-4d329b7c9a4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cursor.execute(\"CREATE DATABASE IF NOT EXISTS placement_eligibility\")\n",
    "cursor.execute(\"USE placement_eligibility\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5e26bb19-55e8-43e4-a019-329af1ba7b26",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cursor.execute(\"\"\"\n",
    "CREATE TABLE IF NOT EXISTS Students (\n",
    "    student_id INT AUTO_INCREMENT PRIMARY KEY,\n",
    "    name VARCHAR(100),\n",
    "    age INT,\n",
    "    gender VARCHAR(10),\n",
    "    email VARCHAR(100),\n",
    "    phone VARCHAR(20),\n",
    "    enrollment_year INT,\n",
    "    course_batch VARCHAR(50),\n",
    "    city VARCHAR(50),\n",
    "    graduation_year INT\n",
    ")\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "575da5a1-a226-4114-a535-7c71b62688d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cursor.execute(\"\"\"\n",
    "CREATE TABLE IF NOT EXISTS Programming (\n",
    "    programming_id INT AUTO_INCREMENT PRIMARY KEY,\n",
    "    student_id INT,\n",
    "    language VARCHAR(50),\n",
    "    problems_solved INT,\n",
    "    assessments_completed INT,\n",
    "    mini_projects INT,\n",
    "    certifications_earned INT,\n",
    "    latest_project_score FLOAT,\n",
    "    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n",
    ")\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7c3cb5d7-fd5e-4ee7-8d62-630ac17b5c02",
   "metadata": {},
   "outputs": [],
   "source": [
    "cursor.execute(\"\"\"\n",
    "CREATE TABLE IF NOT EXISTS SoftSkills (\n",
    "    soft_skill_id INT AUTO_INCREMENT PRIMARY KEY,\n",
    "    student_id INT,\n",
    "    communication INT,\n",
    "    teamwork INT,\n",
    "    presentation INT,\n",
    "    leadership INT,\n",
    "    critical_thinking INT,\n",
    "    interpersonal_skills INT,\n",
    "    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n",
    ")\n",
    "\"\"\")\n",
    "\n",
    "cursor.execute(\"\"\"\n",
    "CREATE TABLE IF NOT EXISTS Placements (\n",
    "    placement_id INT AUTO_INCREMENT PRIMARY KEY,\n",
    "    student_id INT,\n",
    "    mock_interview_score INT,\n",
    "    internships_completed INT,\n",
    "    placement_status VARCHAR(20),\n",
    "    company_name VARCHAR(100),\n",
    "    placement_package FLOAT,\n",
    "    interview_rounds_cleared INT,\n",
    "    placement_date DATE,\n",
    "    FOREIGN KEY (student_id) REFERENCES Students(student_id)\n",
    ")\n",
    "\"\"\")\n",
    "\n",
    "connection.commit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0f9d751a-a12e-4fbc-9b45-4ccd48ec9c7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "fake = Faker()\n",
    "\n",
    "genders = ['Male', 'Female', 'Other']\n",
    "languages = ['Python', 'SQL', 'Java', 'C++']\n",
    "placement_status_options = ['Ready', 'Not Ready', 'Placed']\n",
    "\n",
    "num_records = 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0522f14e-857b-4288-8325-cfb6835af3ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "for _ in range(num_records):\n",
    "    # Insert into Students\n",
    "    name = fake.name()\n",
    "    age = random.randint(18, 25)\n",
    "    gender = random.choice(genders)\n",
    "    email = fake.email()\n",
    "    # Limit phone number length to match database column size\n",
    "    # Assuming the column is VARCHAR(15) or similar\n",
    "    phone = fake.phone_number()[:10]  # Truncate to first 15 characters\n",
    "    enrollment_year = random.randint(2018, 2023)\n",
    "    course_batch = f\"Batch-{random.randint(1,5)}\"\n",
    "    city = fake.city()\n",
    "    graduation_year = enrollment_year + 4\n",
    "\n",
    "    cursor.execute(\"\"\"INSERT INTO Students (name, age, gender, email, phone, enrollment_year, course_batch, city, graduation_year)\n",
    "        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)\n",
    "    \"\"\", (name, age, gender, email, phone, enrollment_year, course_batch, city, graduation_year))\n",
    "    student_id = cursor.lastrowid\n",
    "    cursor.execute(\"\"\"INSERT INTO Programming (student_id, language, problems_solved, assessments_completed, mini_projects, certifications_earned, latest_project_score)\n",
    "        VALUES (%s, %s, %s, %s, %s, %s, %s)\n",
    "    \"\"\", (student_id, random.choice(languages), random.randint(10, 200), random.randint(1, 10), random.randint(0, 5), random.randint(0, 3), round(random.uniform(50, 100), 2)))\n",
    "    \n",
    "    cursor.execute(\"\"\"INSERT INTO SoftSkills (student_id, communication, teamwork, presentation, leadership, critical_thinking, interpersonal_skills)\n",
    "        VALUES (%s, %s, %s, %s, %s, %s, %s)\n",
    "    \"\"\", (student_id, random.randint(50, 100), random.randint(50, 100), random.randint(50, 100), random.randint(50, 100), random.randint(50, 100), random.randint(50, 100)))\n",
    "    placement_status = random.choice(placement_status_options)\n",
    "    company_name = fake.company() if placement_status == 'Placed' else None\n",
    "    placement_package = round(random.uniform(3, 20), 2) if placement_status == 'Placed' else None\n",
    "    placement_date = fake.date_between(start_date='-1y', end_date='today') if placement_status == 'Placed' else None\n",
    "    cursor.execute(\"\"\"INSERT INTO Placements (student_id, mock_interview_score, internships_completed, placement_status, company_name, placement_package, interview_rounds_cleared, placement_date)\n",
    "        VALUES (%s, %s, %s, %s, %s, %s, %s, %s)\n",
    "    \"\"\", (student_id, random.randint(40, 100), random.randint(0, 3), placement_status, company_name, placement_package, random.randint(0, 5), placement_date))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "41962cbb-a93d-4dab-a492-c0f545109e79",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    placement_id  student_id  mock_interview_score  internships_completed  \\\n",
      "0              1           1                    67                      2   \n",
      "1              2           2                    57                      1   \n",
      "2              3           3                    43                      3   \n",
      "3              4           4                    68                      0   \n",
      "4              5           5                    97                      2   \n",
      "5              6           6                    55                      3   \n",
      "6              7         427                    96                      2   \n",
      "7              8         428                    61                      0   \n",
      "8              9         429                    62                      3   \n",
      "9             10         430                    97                      3   \n",
      "10            11         431                    65                      0   \n",
      "11            12         432                    96                      3   \n",
      "12            13         433                    86                      0   \n",
      "13            14         434                    74                      3   \n",
      "14            15         435                    98                      1   \n",
      "15            16         436                    88                      3   \n",
      "16            17         437                    51                      0   \n",
      "17            18         438                   100                      1   \n",
      "18            19         439                    64                      0   \n",
      "19            20         440                    58                      0   \n",
      "\n",
      "   placement_status                 company_name  placement_package  \\\n",
      "0            Placed     Miller, Cook and Estrada              13.79   \n",
      "1             Ready                         None                NaN   \n",
      "2            Placed                 Gates-Powell              13.35   \n",
      "3         Not Ready                         None                NaN   \n",
      "4            Placed             Santana and Sons              13.57   \n",
      "5             Ready                         None                NaN   \n",
      "6             Ready                         None                NaN   \n",
      "7            Placed               Barrett-Harris              17.63   \n",
      "8            Placed                 Foster-Mason              11.92   \n",
      "9         Not Ready                         None                NaN   \n",
      "10           Placed                    Wolfe Inc              11.27   \n",
      "11            Ready                         None                NaN   \n",
      "12        Not Ready                         None                NaN   \n",
      "13            Ready                         None                NaN   \n",
      "14           Placed  Brown, Martinez and English               7.88   \n",
      "15        Not Ready                         None                NaN   \n",
      "16        Not Ready                         None                NaN   \n",
      "17        Not Ready                         None                NaN   \n",
      "18        Not Ready                         None                NaN   \n",
      "19           Placed              Wallace-Daniels               8.98   \n",
      "\n",
      "    interview_rounds_cleared placement_date  \n",
      "0                          2     2024-10-17  \n",
      "1                          5           None  \n",
      "2                          1     2025-05-20  \n",
      "3                          1           None  \n",
      "4                          5     2025-01-31  \n",
      "5                          4           None  \n",
      "6                          1           None  \n",
      "7                          1     2024-11-01  \n",
      "8                          2     2025-03-02  \n",
      "9                          0           None  \n",
      "10                         0     2025-03-27  \n",
      "11                         3           None  \n",
      "12                         3           None  \n",
      "13                         0           None  \n",
      "14                         3     2024-10-19  \n",
      "15                         5           None  \n",
      "16                         0           None  \n",
      "17                         5           None  \n",
      "18                         3           None  \n",
      "19                         2     2024-09-01  \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ANURAG\\AppData\\Local\\Temp\\ipykernel_5564\\1495349246.py:3: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
      "  df = pd.read_sql(query, connection)\n"
     ]
    }
   ],
   "source": [
    "def show_table(table_name):\n",
    "    query = f\"SELECT * FROM {table_name} LIMIT 20\"\n",
    "    df = pd.read_sql(query, connection)\n",
    "    return df\n",
    "\n",
    "print(show_table('Placements'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "139cfafe-360b-4418-83e5-657f7dcf4980",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "from sqlalchemy import create_engine\n",
    "\n",
    "# ---- DATABASE CONNECTION ----\n",
    "# Format → mysql+pymysql://username:password@host/database\n",
    "engine = create_engine(\"mysql+pymysql://root:Anuragroy%40123@localhost/placement_eligibility\")\n",
    "\n",
    "# ---- FETCH DATA FUNCTION ----\n",
    "def fetch_dataframe(query):\n",
    "    return pd.read_sql(query, con=engine)\n",
    "st.set_page_config(page_title=\"Placement Dashboard\", layout=\"wide\")\n",
    "st.title(\"📊 Placement Eligibility Dashboard\")\n",
    "\n",
    "menu = st.sidebar.radio(\"Choose Page\", [\"📋 Eligibility Filter\", \"📈 Insights\", \"🗃 View Tables\"])\n",
    "\n",
    "# =============================\n",
    "# PAGE 1: ELIGIBILITY FILTER\n",
    "# =============================\n",
    "if menu == \"📋 Eligibility Filter\":\n",
    "    st.subheader(\"🎯 Set Eligibility Criteria\")\n",
    "    \n",
    "    min_problems = st.number_input(\"Minimum Problems Solved\", min_value=0, value=50)\n",
    "    min_comm = st.slider(\"Minimum Communication Score\", 0, 100, 75)\n",
    "    min_interns = st.number_input(\"Minimum Internships Completed\", min_value=0, value=1)\n",
    "    \n",
    "    query = f\"\"\"\n",
    "        SELECT s.name, s.course_batch, pr.problems_solved, ss.communication, pl.internships_completed, pl.placement_status\n",
    "        FROM Students s\n",
    "        JOIN Programming pr ON s.student_id = pr.student_id\n",
    "        JOIN SoftSkills ss ON s.student_id = ss.student_id\n",
    "        JOIN Placements pl ON s.student_id = pl.student_id\n",
    "        WHERE pr.problems_solved >= {min_problems}\n",
    "        AND ss.communication >= {min_comm}\n",
    "        AND pl.internships_completed >= {min_interns}\n",
    "    \"\"\"\n",
    "    df = fetch_dataframe(query)\n",
    "    st.dataframe(df)\n",
    "\n",
    "    if not df.empty:\n",
    "        st.success(f\"{len(df)} students found matching your criteria.\")\n",
    "        csv = df.to_csv(index=False).encode(\"utf-8\")\n",
    "        st.download_button(\"Download Results as CSV\", csv, \"eligible_students.csv\", \"text/csv\")\n",
    "\n",
    "# =============================\n",
    "# PAGE 2: INSIGHTS\n",
    "# =============================\n",
    "elif menu == \"📈 Insights\":\n",
    "    st.subheader(\"📊 Placement Insights\")\n",
    "    insights = st.selectbox(\"Select Insight\", [\n",
    "        \"1. Avg Programming Performance per Batch\",\n",
    "        \"2. Top 5 Students Ready for Placement\",\n",
    "        \"3. Soft Skills Averages\",\n",
    "        \"4. High Coders with Low Communication\",\n",
    "        \"5. Placement Rate by Batch\",\n",
    "        \"6. Avg Internships by Status\",\n",
    "        \"7. Top 3 Highest Package Companies\",\n",
    "        \"8. Avg Package per Graduation Year\",\n",
    "        \"9. Most Interview Rounds Cleared\",\n",
    "        \"10. Avg Certifications by Language\"\n",
    "    ])\n",
    "\n",
    "    queries = {\n",
    "        \"1. Avg Programming Performance per Batch\": \"\"\"\n",
    "            SELECT course_batch, AVG(problems_solved) AS avg_problems, AVG(latest_project_score) AS avg_project_score\n",
    "            FROM Students JOIN Programming USING(student_id)\n",
    "            GROUP BY course_batch\n",
    "        \"\"\",\n",
    "        \"2. Top 5 Students Ready for Placement\": \"\"\"\n",
    "            SELECT s.name, p.mock_interview_score, p.placement_package\n",
    "            FROM Students s JOIN Placements p USING(student_id)\n",
    "            WHERE p.placement_status = 'Placed'\n",
    "            ORDER BY p.mock_interview_score DESC\n",
    "            LIMIT 5\n",
    "        \"\"\",\n",
    "        \"3. Soft Skills Averages\": \"\"\"\n",
    "            SELECT AVG(communication) AS avg_comm, AVG(teamwork) AS avg_team, AVG(presentation) AS avg_pres\n",
    "            FROM SoftSkills\n",
    "        \"\"\",\n",
    "        \"4. High Coders with Low Communication\": \"\"\"\n",
    "            SELECT s.name, pr.problems_solved, ss.communication\n",
    "            FROM Students s\n",
    "            JOIN Programming pr USING(student_id)\n",
    "            JOIN SoftSkills ss USING(student_id)\n",
    "            WHERE pr.problems_solved > 100 AND ss.communication < 60\n",
    "        \"\"\",\n",
    "        \"5. Placement Rate by Batch\": \"\"\"\n",
    "            SELECT course_batch,\n",
    "            ROUND(100 * SUM(CASE WHEN placement_status='Placed' THEN 1 ELSE 0 END) / COUNT(*), 2) AS placement_rate\n",
    "            FROM Students s JOIN Placements p USING(student_id)\n",
    "            GROUP BY course_batch\n",
    "        \"\"\",\n",
    "        \"6. Avg Internships by Status\": \"\"\"\n",
    "            SELECT placement_status, AVG(internships_completed) AS avg_internships\n",
    "            FROM Placements\n",
    "            GROUP BY placement_status\n",
    "        \"\"\",\n",
    "        \"7. Top 3 Highest Package Companies\": \"\"\"\n",
    "            SELECT company_name, MAX(placement_package) AS max_package\n",
    "            FROM Placements\n",
    "            WHERE placement_status = 'Placed'\n",
    "            GROUP BY company_name\n",
    "            ORDER BY max_package DESC\n",
    "            LIMIT 3\n",
    "        \"\"\",\n",
    "        \"8. Avg Package per Graduation Year\": \"\"\"\n",
    "            SELECT graduation_year, AVG(placement_package) AS avg_package\n",
    "            FROM Students s JOIN Placements p USING(student_id)\n",
    "            WHERE placement_status = 'Placed'\n",
    "            GROUP BY graduation_year\n",
    "        \"\"\",\n",
    "        \"9. Most Interview Rounds Cleared\": \"\"\"\n",
    "            SELECT s.name, p.interview_rounds_cleared\n",
    "            FROM Students s JOIN Placements p USING(student_id)\n",
    "            ORDER BY p.interview_rounds_cleared DESC\n",
    "            LIMIT 10\n",
    "        \"\"\",\n",
    "        \"10. Avg Certifications by Language\": \"\"\"\n",
    "            SELECT language, AVG(certifications_earned) AS avg_certs\n",
    "            FROM Programming\n",
    "            GROUP BY language\n",
    "        \"\"\"\n",
    "    }\n",
    "\n",
    "    df = fetch_dataframe(queries[insights])\n",
    "    st.dataframe(df)\n",
    "\n",
    "# =============================\n",
    "# PAGE 3: RAW TABLE VIEWER\n",
    "# =============================\n",
    "elif menu == \"🗃 View Tables\":\n",
    "    table = st.selectbox(\"Select Table\", ['Students', 'Programming', 'SoftSkills', 'Placements'])\n",
    "    df = fetch_dataframe(f\"SELECT * FROM {table} LIMIT 100\")\n",
    "    st.dataframe(df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff155175-56e2-4ffc-ab47-f74bfd18efc9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
